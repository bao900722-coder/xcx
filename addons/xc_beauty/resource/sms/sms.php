<?php
 goto M17aT; iQR1F: $endpoints = array(); goto A8yNS; bXN3Q: class ShaHmac1Signer implements ISigner { public function signString($source, $accessSecret) { return base64_encode(hash_hmac("\x73\150\x61\61", $source, $accessSecret, true)); } public function getSignatureMethod() { return "\x48\x4d\x41\x43\x2d\123\110\101\61"; } public function getSignatureVersion() { return "\x31\x2e\60"; } } goto R9IeX; TWRg_: define("\x45\x4e\101\x42\x4c\105\137\110\124\x54\120\x5f\120\122\x4f\130\x59", FALSE); goto CAH93; taBbV: ini_set("\x64\x69\x73\160\154\141\x79\x5f\145\162\x72\x6f\x72\163", "\x31"); goto TWRg_; CAH93: define("\110\124\124\120\x5f\120\x52\x4f\130\131\x5f\111\120", "\61\62\67\x2e\x30\x2e\60\56\61"); goto aJiHG; PFfif: header("\x43\x6f\156\164\x65\156\x74\x2d\x54\x79\x70\x65\72\40\x74\145\170\164\57\160\x6c\x61\x69\156\73\40\143\x68\141\162\x73\x65\164\75\165\164\x66\x2d\70"); goto ldSkA; pCwn_: class LibcurlWrapper { private $curlMultiHandle; private $curlHandleInfo; private $idleCurlHandle; public function __construct() { $this->curlMultiHandle = curl_multi_init(); $this->idleCurlHandle = array(); } public function __destruct() { goto mduoG; kuSxQ: Kv2gP: goto CndNj; CndNj: $this->idleCurlHandle = array(); goto N_UaG; tEUmS: foreach ($this->idleCurlHandle as $handle) { curl_close($handle); CtxXb: } goto kuSxQ; mduoG: curl_multi_close($this->curlMultiHandle); goto tEUmS; N_UaG: } public function startSendingRequest($httpRequest, $done) { goto U4J0x; iCTQg: curl_setopt($curlHandle, CURLOPT_POST, true); goto XCDu5; wZQFU: return false; goto uBFA9; bnGvJ: ZpTKt: goto MQceX; ZqMNh: if (!($httpRequest->method === "\x50\117\x53\x54")) { goto PIJfa; } goto F1fa0; zelvM: PIJfa: goto rYBPo; l8tdw: curl_multi_add_handle($this->curlMultiHandle, $curlHandle); goto sECgz; LUu6e: curl_setopt($curlHandle, CURLOPT_SAFE_UPLOAD, true); goto ZYtgR; PaPJo: curl_setopt($curlHandle, CURLOPT_URL, $httpRequest->url); goto EA_kr; L7c8g: if (!($curlHandle === false)) { goto PUrd9; } goto wZQFU; pMfYY: $curlHandle = array_pop($this->idleCurlHandle); goto bnGvJ; fXNxN: array_push($headers, "\103\157\156\164\145\x6e\164\x2d\124\x79\160\x65\72\40\155\165\154\164\x69\x70\x61\x72\164\57\146\x6f\x72\155\x2d\x64\141\164\141\73\40\x62\x6f\165\x6e\144\141\162\x79\75" . $arr[0]); goto vL0GR; EA_kr: curl_setopt($curlHandle, CURLOPT_HEADER, 1); goto Qir4n; MQceX: curl_setopt($curlHandle, CURLOPT_TIMEOUT_MS, $httpRequest->timeoutMs); goto PaPJo; F1fa0: if (!defined("\103\x55\122\114\x4f\120\x54\x5f\x53\101\106\x45\137\125\x50\114\117\101\104")) { goto dfDOt; } goto LUu6e; GrJLN: $curlHandle = curl_init(); goto L7c8g; sECgz: $this->curlHandleInfo[$curlHandle]["\x64\x6f\x6e\145"] = $done; goto gbu3T; TC4qQ: array_push($headers, "\125\163\145\x72\55\101\x67\145\156\164\x3a" . Conf::getUserAgent()); goto ZqMNh; rYBPo: curl_setopt($curlHandle, CURLOPT_HTTPHEADER, $headers); goto l8tdw; ZYtgR: dfDOt: goto iCTQg; XCDu5: $arr = buildCustomPostFields($httpRequest->dataToPost); goto jvy9E; U4J0x: if (count($this->idleCurlHandle) !== 0) { goto m3CFz; } goto GrJLN; qm2rP: m3CFz: goto pMfYY; Xgkap: $headers = $httpRequest->customHeaders; goto TC4qQ; jvy9E: array_push($headers, "\x45\x78\160\x65\143\164\x3a\x20\x31\60\60\55\143\157\156\164\151\156\x75\x65"); goto fXNxN; uBFA9: PUrd9: goto S1PjZ; vL0GR: curl_setopt($curlHandle, CURLOPT_POSTFIELDS, $arr[1]); goto zelvM; S1PjZ: goto ZpTKt; goto qm2rP; Qir4n: curl_setopt($curlHandle, CURLOPT_RETURNTRANSFER, 1); goto Xgkap; gbu3T: $this->curlHandleInfo[$curlHandle]["\x72\145\x71\x75\145\163\x74"] = $httpRequest; goto RKW4f; RKW4f: } public function performSendingRequest() { goto KWnNJ; yWVcJ: OEiEA: goto euaWT; fSmUI: if (!(curl_multi_select($this->curlMultiHandle) == -1)) { goto pid3l; } goto lYQMc; Nk8qG: $info = curl_multi_info_read($this->curlMultiHandle); goto ZsXa3; ZsXa3: if (!($info !== false)) { goto hEWWJ; } goto QknOq; yRtYL: hEWWJ: goto REFmF; CHqu4: if ($mrc == CURLM_CALL_MULTI_PERFORM) { goto oLX2u; } goto yWVcJ; euaWT: goto ZXVA1; goto oPdqu; QknOq: $this->processResult($info); goto yRtYL; REFmF: if ($mrc == CURLM_CALL_MULTI_PERFORM) { goto tpdqk; } goto Ri0mk; nkIDx: $mrc = curl_multi_exec($this->curlMultiHandle, $active); goto GUj5t; gT5WQ: gw38R: goto jCVIr; Ri0mk: blksw: goto rO2DH; XaDxZ: if (!($info !== false)) { goto Tv8wB; } goto Uv7qR; lYQMc: usleep(1); goto PvIkp; M0pGT: rYqw1: goto PwQx3; lvwQI: if (!(count($this->curlHandleInfo) == 0)) { goto CGuaz; } goto aYQ8D; oPdqu: r7LBZ: goto lvwQI; PKkxV: $mrc = curl_multi_exec($this->curlMultiHandle, $active); goto Nk8qG; PvIkp: pid3l: goto gr0IQ; AcbTH: CGuaz: goto gT5WQ; gr0IQ: oLX2u: goto nkIDx; jCVIr: goto SZDOk; goto M0pGT; Oept9: Tv8wB: goto CHqu4; Jc1KV: if (!($active && $mrc == CURLM_OK)) { goto r7LBZ; } goto fSmUI; Uv7qR: $this->processResult($info); goto Oept9; rO2DH: ZXVA1: goto Jc1KV; KWnNJ: SZDOk: goto oZbf1; GUj5t: $info = curl_multi_info_read($this->curlMultiHandle); goto XaDxZ; Y8QWp: tpdqk: goto PKkxV; oZbf1: $active = null; goto Y8QWp; aYQ8D: goto rYqw1; goto AcbTH; PwQx3: } private function processResult($info) { goto fLD89; RSpg1: $response->curlErrorMessage = curl_error($handle); goto GDAIR; KBmL6: if ($result !== CURLE_OK) { goto zu8e2; } goto exMJt; Xf8U4: foreach ($headLines as $head) { goto WtCvB; YHKQ1: if (!(count($arr) >= 2)) { goto KWFkj; } goto Jx_LU; l9DSW: Hg08S: goto eeS3d; WtCvB: $arr = explode("\x3a", $head); goto YHKQ1; Jx_LU: $response->headers[trim($arr[0])] = trim($arr[1]); goto OmsEk; OmsEk: KWFkj: goto l9DSW; eeS3d: } goto HTELo; qwQcr: goto cbnnB; goto rhEDc; wRjo7: cbnnB: goto KXOCl; rhEDc: zu8e2: goto ydQbj; zD6sC: $body = substr($responseStr, $headerSize); goto vWRUQ; s03Ot: $headerStr = substr($responseStr, 0, $headerSize); goto zD6sC; DpEiN: $headLines = explode("\15\12", $headerStr); goto Xf8U4; QysYM: $headerSize = curl_getinfo($handle, CURLINFO_HEADER_SIZE); goto s03Ot; ydQbj: $response->curlErrorCode = $result; goto RSpg1; wtAXt: $response->body = $body; goto RiBUg; KXOCl: unset($this->curlHandleInfo[$handle]); goto BKZka; Y6T1C: array_push($this->idleCurlHandle, $handle); goto QoeyX; y9yNm: $done = $this->curlHandleInfo[$handle]["\144\157\x6e\145"]; goto vDDZT; BJirs: $handle = $info["\x68\x61\x6e\x64\154\x65"]; goto b0Ala; jzBfb: $response->curlErrorMessage = curl_error($handle); goto r7VP6; RiBUg: call_user_func($done, $request, $response); goto qwQcr; HTELo: LZieJ: goto wtAXt; fLD89: $result = $info["\x72\x65\163\165\x6c\164"]; goto BJirs; vWRUQ: $response->curlErrorCode = curl_errno($handle); goto jzBfb; BKZka: curl_multi_remove_handle($this->curlMultiHandle, $handle); goto Y6T1C; exMJt: $responseStr = curl_multi_getcontent($handle); goto QysYM; b0Ala: $request = $this->curlHandleInfo[$handle]["\162\145\161\x75\145\x73\164"]; goto y9yNm; vDDZT: $response = new HttpResponse(); goto KBmL6; r7VP6: $response->statusCode = curl_getinfo($handle, CURLINFO_HTTP_CODE); goto DpEiN; GDAIR: call_user_func($done, $request, $response); goto wRjo7; QoeyX: } private function resetCurl($handle) { goto gOZWK; S3t1c: goto HXsAp; goto fP7ma; qvi_B: curl_reset($handle); goto B1O09; gOZWK: if (function_exists("\x63\x75\x72\x6c\137\x72\145\163\145\164")) { goto mzvhN; } goto Z3wbF; AxfFd: curl_setopt($handler, CURLOPT_POSTFIELDS, array()); goto z0PKx; O0z1w: curl_setopt($handler, CURLOPT_SSL_VERIFYHOST, 0); goto S3t1c; fP7ma: mzvhN: goto qvi_B; z0PKx: curl_setopt($handler, CURLOPT_TIMEOUT, 0); goto yEo_i; Z3wbF: curl_setopt($handler, CURLOPT_URL, ''); goto daW3y; B1O09: HXsAp: goto Ctx1v; yEo_i: curl_setopt($handler, CURLOPT_SSL_VERIFYPEER, false); goto O0z1w; daW3y: curl_setopt($handler, CURLOPT_HTTPHEADER, array()); goto AxfFd; Ctx1v: } } goto QLsHe; vghb1: class xcap_SmsDemo { static $acsClient = null; public static function getAcsClient($AccessKeyId, $AccessKeySecret) { goto ImA2S; Biq2U: $domain = "\144\171\x73\155\163\141\160\x69\56\x61\154\x69\171\165\x6e\143\x73\56\x63\157\x6d"; goto EJpux; X4Xip: $region = "\x63\x6e\55\x68\141\156\147\172\x68\157\165"; goto rtgqm; YCdNl: static::$acsClient = new DefaultAcsClient($profile); goto rPUXa; ImA2S: $product = "\x44\x79\163\x6d\163\x61\160\x69"; goto Biq2U; lF929: DefaultProfile::addEndpoint($endPointName, $region, $product, $domain); goto YCdNl; N_yza: $accessKeySecret = $AccessKeySecret; goto X4Xip; rtgqm: $endPointName = "\x63\x6e\55\x68\x61\x6e\147\172\150\157\165"; goto MrTj5; Goudv: return static::$acsClient; goto CTy1g; oLfc8: $profile = DefaultProfile::getProfile($region, $accessKeyId, $accessKeySecret); goto lF929; EJpux: $accessKeyId = $AccessKeyId; goto N_yza; MrTj5: if (!(static::$acsClient == null)) { goto ziSWT; } goto oLfc8; rPUXa: ziSWT: goto Goudv; CTy1g: } public static function sendSms($AccessKeyId, $AccessKeySecret, $signName, $templateCode, $phoneNumbers, $templateParam = null, $outId = null, $smsUpExtendCode = null) { goto HaUhe; H3ZPw: if (!$templateParam) { goto oaigz; } goto YY_cQ; iyiJ7: D2U7o: goto whhRw; CYmq8: $acsResponse = static::getAcsClient($AccessKeyId, $AccessKeySecret)->getAcsResponse($request); goto a1G9V; tgJ2T: TKoyu: goto CYmq8; whhRw: if (!$smsUpExtendCode) { goto TKoyu; } goto UBwfC; nyY02: oaigz: goto yUeho; UBwfC: $request->setSmsUpExtendCode($smsUpExtendCode); goto tgJ2T; dPu2e: $request->setTemplateCode($templateCode); goto H3ZPw; a1G9V: return $acsResponse; goto fepu4; QvLVO: $request->setSignName($signName); goto dPu2e; YY_cQ: $request->setTemplateParam(json_encode($templateParam)); goto nyY02; sBVNz: $request->setPhoneNumbers($phoneNumbers); goto QvLVO; yUeho: if (!$outId) { goto D2U7o; } goto ALyJ9; ALyJ9: $request->setOutId($outId); goto iyiJ7; HaUhe: $request = new SendSmsRequest(); goto sBVNz; fepu4: } public function queryDetails($phoneNumbers, $sendDate, $pageSize = 10, $currentPage = 1, $bizId = null) { goto gGHFE; eD1d9: $request->setCurrentPage($currentPage); goto mPTfF; Zc8QD: $request->setPageSize($pageSize); goto eD1d9; K6wau: $request->setSendDate($sendDate); goto Zc8QD; gGHFE: $request = new QuerySendDetailsRequest(); goto Sa_mi; EYHag: $request->setBizId($bizId); goto K6wau; mPTfF: $acsResponse = static::getAcsClient()->getAcsResponse($request); goto lglz2; lglz2: return $acsResponse; goto kc_k2; Sa_mi: $request->setPhoneNumber($phoneNumbers); goto EYHag; kc_k2: } } goto s3aWd; EhC8_: class ProductDomain { private $productName; private $domainName; function __construct($product, $domain) { $this->productName = $product; $this->domainName = $domain; } public function getProductName() { return $this->productName; } public function setProductName($productName) { $this->productName = $productName; } public function getDomainName() { return $this->domainName; } public function setDomainName($domainName) { $this->domainName = $domainName; } } goto LBtiJ; s3aWd: set_time_limit(0); goto PFfif; YzAcN: abstract class RpcAcsRequest extends AcsRequest { private $dateTimeFormat = "\131\x2d\155\55\x64\x5c\x54\110\72\x69\x3a\163\x5c\132"; private $domainParameters = array(); function __construct($product, $version, $actionName) { parent::__construct($product, $version, $actionName); $this->initialize(); } private function initialize() { $this->setMethod("\107\105\124"); $this->setAcceptFormat("\112\123\x4f\x4e"); } private function prepareValue($value) { goto ae0T9; t6FMG: return "\146\141\x6c\163\145"; goto zH3id; dFJyn: goto BmesR; goto YzdVE; ET8bf: ewE62: goto uwf0F; ae0T9: if (is_bool($value)) { goto L5J9L; } goto eEmg0; YzdVE: L5J9L: goto wVl_7; yQIHP: AbY_I: goto xRyLk; xRyLk: return "\x74\162\165\x65"; goto ET8bf; zH3id: goto ewE62; goto yQIHP; eEmg0: return $value; goto dFJyn; wVl_7: if ($value) { goto AbY_I; } goto t6FMG; uwf0F: BmesR: goto F9Nt2; F9Nt2: } public function composeUrl($iSigner, $credential, $domain) { goto mR0TV; HgSug: ItR6m: goto aKx8l; Ug2a8: return $requestUrl; goto ArHCr; Dp36f: if (parent::getMethod() == "\120\x4f\x53\124") { goto ItR6m; } goto JrIMN; mFala: s3NP7: goto Ym6Le; WhCKq: $apiParams["\123\x69\147\156\141\164\165\x72\x65"] = $this->computeSignature($apiParams, $credential->getAccessSecret(), $iSigner); goto Dp36f; ENYk3: $apiParams["\123\x69\x67\156\x61\x74\x75\162\x65\x56\x65\162\163\x69\157\156"] = $iSigner->getSignatureVersion(); goto jRyi0; d0kvS: goto gkqFQ; goto HgSug; JrIMN: $requestUrl = $this->getProtocol() . "\x3a\57\x2f" . $domain . "\57\x3f"; goto rLBsD; aKx8l: $requestUrl = $this->getProtocol() . "\72\x2f\x2f" . $domain . "\x2f"; goto e2d6p; w7sME: XyUTD: goto VxhiR; Ig3B7: foreach ($apiParams as $key => $value) { $apiParams[$key] = $this->prepareValue($value); u_9GJ: } goto w7sME; xHgFb: p1faY: goto Ug2a8; Ym6Le: return substr($requestUrl, 0, -1); goto d0kvS; egBO4: $apiParams["\101\143\143\145\163\163\113\x65\171\x49\x64"] = $credential->getAccessKeyId(); goto UnGbn; VxhiR: $apiParams["\x52\145\x67\151\157\x6e\x49\144"] = $this->getRegionId(); goto egBO4; mR0TV: $apiParams = parent::getQueryParameters(); goto Ig3B7; e2d6p: foreach ($apiParams as $apiParamKey => $apiParamValue) { $this->putDomainParameters($apiParamKey, $apiParamValue); bFGjM: } goto xHgFb; j8bB0: $apiParams["\x56\x65\x72\x73\x69\157\156"] = $this->getVersion(); goto WhCKq; UnGbn: $apiParams["\x46\157\x72\x6d\141\x74"] = $this->getAcceptFormat(); goto Zfd2V; qLrnr: date_default_timezone_set("\x47\115\x54"); goto B4rYI; Zfd2V: $apiParams["\x53\x69\147\x6e\141\x74\165\x72\145\x4d\x65\164\150\157\x64"] = $iSigner->getSignatureMethod(); goto ENYk3; BIYvV: $apiParams["\x41\143\164\x69\x6f\156"] = $this->getActionName(); goto j8bB0; ArHCr: gkqFQ: goto r7j2c; B4rYI: $apiParams["\124\x69\x6d\x65\163\x74\141\x6d\160"] = date($this->dateTimeFormat); goto BIYvV; rLBsD: foreach ($apiParams as $apiParamKey => $apiParamValue) { $requestUrl .= "{$apiParamKey}\x3d" . urlencode($apiParamValue) . "\46"; HVwP5: } goto mFala; jRyi0: $apiParams["\123\x69\147\x6e\x61\164\165\162\145\116\x6f\156\143\x65"] = uniqid(mt_rand(0, 0xffff), true); goto qLrnr; r7j2c: } private function computeSignature($parameters, $accessKeySecret, $iSigner) { goto LCrq0; LCrq0: ksort($parameters); goto jr2BZ; AvaTM: $signature = $iSigner->signString($stringToSign, $accessKeySecret . "\46"); goto sf0YP; jr2BZ: $canonicalizedQueryString = ''; goto MGToZ; cvSas: YJK9y: goto encAY; sf0YP: return $signature; goto Hpc4J; encAY: $stringToSign = parent::getMethod() . "\46\x25\62\106\46" . $this->percentencode(substr($canonicalizedQueryString, 1)); goto AvaTM; MGToZ: foreach ($parameters as $key => $value) { $canonicalizedQueryString .= "\46" . $this->percentEncode($key) . "\x3d" . $this->percentEncode($value); zm1ee: } goto cvSas; Hpc4J: } protected function percentEncode($str) { goto CK82y; PDbc7: return $res; goto qa3Lc; lWOQZ: $res = preg_replace("\x2f\134\x2a\x2f", "\x25\x32\x41", $res); goto gwPce; gwPce: $res = preg_replace("\57\45\67\x45\x2f", "\176", $res); goto PDbc7; q4M_T: $res = preg_replace("\x2f\134\53\57", "\45\x32\x30", $res); goto lWOQZ; CK82y: $res = urlencode($str); goto q4M_T; qa3Lc: } public function getDomainParameter() { return $this->domainParameters; } public function putDomainParameters($name, $value) { $this->domainParameters[$name] = $value; } } goto k4Vi5; aJiHG: define("\x48\x54\x54\x50\x5f\120\x52\x4f\x58\131\x5f\120\117\x52\x54", "\70\x38\70\70"); goto opyWU; jM2Cm: class Credential { private $dateTimeFormat = "\131\x2d\155\55\x64\134\x54\x48\x3a\151\x3a\x73\134\x5a"; private $refreshDate; private $expiredDate; private $accessKeyId; private $accessSecret; private $securityToken; function __construct($accessKeyId, $accessSecret) { goto TfDNe; TfDNe: $this->accessKeyId = $accessKeyId; goto iHzKq; iHzKq: $this->accessSecret = $accessSecret; goto E8Tsp; E8Tsp: $this->refreshDate = date($this->dateTimeFormat); goto eRldS; eRldS: } public function isExpired() { goto BIGWA; RnlxU: return false; goto eZfik; A0pdE: hGGRO: goto d5Lot; byK4W: if (!(strtotime($this->expiredDate) > date($this->dateTimeFormat))) { goto hGGRO; } goto tMBsx; eZfik: bL4gj: goto byK4W; tMBsx: return false; goto A0pdE; BIGWA: if (!($this->expiredDate == null)) { goto bL4gj; } goto RnlxU; d5Lot: return true; goto cX20z; cX20z: } public function getRefreshDate() { return $this->refreshDate; } public function getExpiredDate() { return $this->expiredDate; } public function setExpiredDate($expiredHours) { goto EM3Te; xnVV5: return $this->expiredDate = date($this->dateTimeFormat, strtotime("\53" . $expiredHours . "\40\150\x6f\x75\162")); goto dZq0O; EM3Te: if (!($expiredHours > 0)) { goto qqkzJ; } goto xnVV5; dZq0O: qqkzJ: goto zlrrH; zlrrH: } public function getAccessKeyId() { return $this->accessKeyId; } public function setAccessKeyId($accessKeyId) { $this->accessKeyId = $accessKeyId; } public function getAccessSecret() { return $this->accessSecret; } public function setAccessSecret($accessSecret) { $this->accessSecret = $accessSecret; } } goto aQHZd; u5twt: $json = json_encode($xml); goto fJY0Q; R9IeX: interface IAcsClient { public function doAction($requst); } goto UqkgS; opyWU: class HttpRequest { public $timeoutMs; public $url; public $method; public $customHeaders; public $dataToPost; public $userData; } goto PZ6jQ; ldSkA: $endpoint_filename = dirname(__FILE__) . DIRECTORY_SEPARATOR . "\145\156\144\160\157\x69\156\x74\163\56\170\155\154"; goto C9REd; YS2ny: b81SC: goto mkGOt; QLsHe: class xcHttpResponse { private $body; private $status; public function getBody() { return $this->body; } public function setBody($body) { $this->body = $body; } public function getStatus() { return $this->status; } public function setStatus($status) { $this->status = $status; } public function isSuccess() { goto Ozvam; prcEd: oj9kj: goto VxqTt; VxqTt: return false; goto s5w0O; WHjoO: return true; goto prcEd; Ozvam: if (!(200 <= $this->status && 300 > $this->status)) { goto oj9kj; } goto WHjoO; s5w0O: } } goto qCFCF; M17aT: error_reporting(E_ALL); goto taBbV; LBtiJ: class EndpointProvider { private static $endpoints; public static function findProductDomain($regionId, $product) { goto hxdEe; xmphX: Lppy4: goto sk_Lv; sk_Lv: foreach (self::$endpoints as $key => $endpoint) { goto nYQP2; KfAMt: qtDrv: goto jk_IA; nYQP2: if (!in_array($regionId, $endpoint->getRegionIds())) { goto zkRpY; } goto wmiRl; bl5Eq: zkRpY: goto KfAMt; wmiRl: return self::findProductDomainByProduct($endpoint->getProductDomains(), $product); goto bl5Eq; jk_IA: } goto D_TnQ; enr9j: return null; goto YQIWX; HKxwU: return null; goto xmphX; hxdEe: if (!(null == $regionId || null == $product || null == self::$endpoints)) { goto Lppy4; } goto HKxwU; D_TnQ: Y547k: goto enr9j; YQIWX: } private static function findProductDomainByProduct($productDomains, $product) { goto G18QC; CZOTQ: XxHi2: goto rvR1R; t9cjf: fWHxx: goto r_l_B; G18QC: if (!(null == $productDomains)) { goto XxHi2; } goto TbyJ9; TbyJ9: return null; goto CZOTQ; rvR1R: foreach ($productDomains as $key => $productDomain) { goto ayurB; RP2Nf: return $productDomain->getDomainName(); goto timdk; ayurB: if (!($product == $productDomain->getProductName())) { goto AsK29; } goto RP2Nf; timdk: AsK29: goto GM7Iu; GM7Iu: KFFdZ: goto nYATj; nYATj: } goto t9cjf; r_l_B: return null; goto FUP3N; FUP3N: } public static function getEndpoints() { return self::$endpoints; } public static function setEndpoints($endpoints) { self::$endpoints = $endpoints; } } goto jM2Cm; qCFCF: class HttpHelper { public static $connectTimeout = 30; public static $readTimeout = 80; public static function curl($url, $httpMethod = "\107\105\x54", $postFields = null, $headers = null) { goto Lx0iV; Lx0iV: $ch = curl_init(); goto zEWL8; xnCuR: curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false); goto b2Wzu; dpV3c: curl_setopt($ch, CURLOPT_PROXYPORT, HTTP_PROXY_PORT); goto tQxtS; xy7v8: Rg98x: goto ujKgf; zdzHJ: if (!ENABLE_HTTP_PROXY) { goto MsatR; } goto m1pJb; Izu2M: MsatR: goto f692y; uG2Yz: VJhry: goto Sv_DB; Vh2O3: U1NIO: goto Dx3G0; ujKgf: curl_close($ch); goto h4mQv; HBlOv: $httpResponse->setStatus(curl_getinfo($ch, CURLINFO_HTTP_CODE)); goto thCNq; b2Wzu: curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, false); goto MF94l; DGZC2: curl_setopt($ch, CURLOPT_FAILONERROR, false); goto kyIJG; yogjr: curl_setopt($ch, CURLOPT_CONNECTTIMEOUT, self::$connectTimeout); goto uG2Yz; tQxtS: curl_setopt($ch, CURLOPT_PROXYTYPE, CURLPROXY_HTTP); goto Izu2M; nW4Az: if (!self::$readTimeout) { goto U1NIO; } goto waHkt; Dx3G0: if (!self::$connectTimeout) { goto VJhry; } goto yogjr; aVLcS: wauJb: goto jlXbn; m1pJb: curl_setopt($ch, CURLOPT_PROXYAUTH, CURLAUTH_BASIC); goto yAUks; thCNq: if (!curl_errno($ch)) { goto Rg98x; } goto py3uK; py3uK: throw new ClientException("\123\145\x72\166\145\x72\40\x75\x6e\x72\x65\141\143\x68\141\x62\x6c\145\72\x20\105\162\162\156\x6f\x3a\x20" . curl_errno($ch) . "\x20" . curl_error($ch), "\x53\104\x4b\x2e\x53\145\x72\166\145\x72\125\156\162\x65\x61\x63\150\141\x62\x6c\x65"); goto xy7v8; MF94l: aYjw2: goto x2aM4; zEWL8: curl_setopt($ch, CURLOPT_CUSTOMREQUEST, $httpMethod); goto zdzHJ; jlXbn: $httpResponse = new xcHttpResponse(); goto ywbhC; x2aM4: if (!(is_array($headers) && 0 < count($headers))) { goto wauJb; } goto sNqT7; nrOvu: curl_setopt($ch, CURLOPT_POSTFIELDS, is_array($postFields) ? self::getPostHttpBody($postFields) : $postFields); goto nW4Az; yAUks: curl_setopt($ch, CURLOPT_PROXY, HTTP_PROXY_IP); goto dpV3c; Sv_DB: if (!(strlen($url) > 5 && strtolower(substr($url, 0, 5)) == "\x68\164\164\x70\163")) { goto aYjw2; } goto xnCuR; ywbhC: $httpResponse->setBody(curl_exec($ch)); goto HBlOv; f692y: curl_setopt($ch, CURLOPT_URL, $url); goto DGZC2; sNqT7: $httpHeaders = self::getHttpHearders($headers); goto JLmmS; kyIJG: curl_setopt($ch, CURLOPT_RETURNTRANSFER, true); goto nrOvu; h4mQv: return $httpResponse; goto NuV53; JLmmS: curl_setopt($ch, CURLOPT_HTTPHEADER, $httpHeaders); goto aVLcS; waHkt: curl_setopt($ch, CURLOPT_TIMEOUT, self::$readTimeout); goto Vh2O3; NuV53: } static function getPostHttpBody($postFildes) { goto OZ7UY; r51gP: return substr($content, 0, -1); goto FV1X0; ozBBc: foreach ($postFildes as $apiParamKey => $apiParamValue) { $content .= "{$apiParamKey}\x3d" . urlencode($apiParamValue) . "\x26"; yJAgI: } goto YKzZo; OZ7UY: $content = ''; goto ozBBc; YKzZo: Z7Lti: goto r51gP; FV1X0: } static function getHttpHearders($headers) { goto XlvUn; rfaKe: x9P7e: goto WCiho; WCiho: return $httpHeader; goto KbcQg; XlvUn: $httpHeader = array(); goto VDPuI; VDPuI: foreach ($headers as $key => $value) { array_push($httpHeader, $key . "\x3a" . $value); F0X1O: } goto rfaKe; KbcQg: } } goto CVvad; aQHZd: interface IClientProfile { public function getSigner(); public function getRegionId(); public function getFormat(); public function getCredential(); } goto yFW22; C9REd: $xml = simplexml_load_string(file_get_contents($endpoint_filename)); goto u5twt; fJY0Q: $json_array = json_decode($json, TRUE); goto iQR1F; UqkgS: class DefaultAcsClient implements IAcsClient { public $iClientProfile; public $__urlTestFlag__; function __construct($iClientProfile) { $this->iClientProfile = $iClientProfile; $this->__urlTestFlag__ = false; } public function getAcsResponse($request, $iSigner = null, $credential = null, $autoRetry = true, $maxRetryNumber = 3) { goto p7U8x; zecSP: return $respObject; goto mAqtU; f7sVv: $this->buildApiException($respObject, $httpResponse->getStatus()); goto qQu1R; kouHL: $respObject = $this->parseAcsResponse($httpResponse->getBody(), $request->getAcceptFormat()); goto oCMXF; p7U8x: $httpResponse = $this->doActionImpl($request, $iSigner, $credential, $autoRetry, $maxRetryNumber); goto kouHL; oCMXF: if (!(false == $httpResponse->isSuccess())) { goto e1QGt; } goto f7sVv; qQu1R: e1QGt: goto zecSP; mAqtU: } private function doActionImpl($request, $iSigner = null, $credential = null, $autoRetry = true, $maxRetryNumber = 3) { goto OLVup; L_ox_: $httpResponse = HttpHelper::curl($requestUrl, $request->getMethod(), $request->getContent(), $request->getHeaders()); goto iNBwa; ylc3R: OVnn_: goto Xh7JN; mrTj7: $requestUrl = $request->composeUrl($iSigner, $credential, $domain); goto R3uzI; gr0xb: $httpResponse = HttpHelper::curl($requestUrl, $request->getMethod(), $request->getContent(), $request->getHeaders()); goto M0kMi; R3uzI: if (count($request->getDomainParameter()) > 0) { goto jsb7n; } goto L_ox_; OLVup: if (!(null == $this->iClientProfile && (null == $iSigner || null == $credential || null == $request->getRegionId() || null == $request->getAcceptFormat()))) { goto wRFPj; } goto NhRE8; umFqX: if (!(null == $domain)) { goto tP34Y; } goto BiSec; hVJ1Y: if (!(null == $credential)) { goto RpH4o; } goto NRuyI; AC0pR: goto glD49; goto VJMdJ; xoWol: KjXT2: goto ORvQ5; NhRE8: throw new ClientException("\x4e\x6f\40\141\143\164\151\166\145\40\160\162\x6f\146\151\154\145\x20\146\x6f\x75\156\x64\x2e", "\x53\104\x4b\56\x49\156\x76\x61\154\151\144\120\x72\x6f\x66\x69\x6c\x65"); goto Su2Az; BiSec: throw new ClientException("\x43\x61\156\40\156\157\x74\x20\x66\x69\156\x64\x20\x65\x6e\x64\x70\157\151\156\x74\x20\164\x6f\40\x61\x63\143\x65\163\163\x2e", "\123\104\x4b\56\111\156\166\x61\x6c\151\144\x52\145\147\151\157\156\x49\144"); goto OZBTC; iNBwa: goto YPVTA; goto FQwKY; bdkVu: if (!(null == $iSigner)) { goto Vtiil; } goto pFfiC; VW0AR: RpH4o: goto bSAPd; OZBTC: tP34Y: goto a5j_I; ORvQ5: $retryTimes = 1; goto d_t9E; WOIRh: YPVTA: goto JgB3b; lnoyK: $httpResponse = HttpHelper::curl($requestUrl, $request->getDomainParameter(), $request->getHeaders()); goto WOIRh; Xh7JN: $httpResponse = HttpHelper::curl($requestUrl, $request->getMethod(), $request->getDomainParameter(), $request->getHeaders()); goto xoWol; NRuyI: $credential = $this->iClientProfile->getCredential(); goto VW0AR; pFfiC: $iSigner = $this->iClientProfile->getSigner(); goto sElTy; d_t9E: glD49: goto E1BYd; E1BYd: if (!(500 <= $httpResponse->getStatus() && $autoRetry && $retryTimes < $maxRetryNumber)) { goto z36bq; } goto mrTj7; Su2Az: wRFPj: goto bdkVu; sElTy: Vtiil: goto hVJ1Y; aFAFg: return $httpResponse; goto OGhEi; FQwKY: jsb7n: goto lnoyK; Lip9u: throw new ClientException($requestUrl, "\x55\122\x4c\x54\145\163\164\x46\154\141\147\111\x73\123\145\x74"); goto d9Vh3; JgB3b: $retryTimes++; goto AC0pR; g7h9c: if (count($request->getDomainParameter()) > 0) { goto OVnn_; } goto gr0xb; M0kMi: goto KjXT2; goto ylc3R; d9Vh3: SkGkv: goto g7h9c; VJMdJ: z36bq: goto aFAFg; a5j_I: $requestUrl = $request->composeUrl($iSigner, $credential, $domain); goto DQuho; W8Fae: $domain = EndpointProvider::findProductDomain($request->getRegionId(), $request->getProduct()); goto umFqX; bSAPd: $request = $this->prepareRequest($request); goto W8Fae; DQuho: if (!$this->__urlTestFlag__) { goto SkGkv; } goto Lip9u; OGhEi: } public function doAction($request, $iSigner = null, $credential = null, $autoRetry = true, $maxRetryNumber = 3) { trigger_error("\x64\157\x41\143\x74\x69\x6f\x6e\50\x29\x20\x69\163\x20\x64\145\160\x72\x65\143\141\164\x65\144\x2e\40\120\x6c\x65\x61\x73\145\x20\x75\x73\145\x20\147\145\x74\x41\x63\x73\x52\x65\x73\x70\x6f\x6e\x73\x65\50\x29\x20\x69\x6e\x73\164\x65\141\x64\56", E_USER_NOTICE); return $this->doActionImpl($request, $iSigner, $credential, $autoRetry, $maxRetryNumber); } private function prepareRequest($request) { goto lwmoa; HMa33: cIDBE: goto yBy3X; S9ldT: $request->setMethod("\x47\x45\x54"); goto seXq2; lwmoa: if (!(null == $request->getRegionId())) { goto USdAq; } goto AYukn; AYukn: $request->setRegionId($this->iClientProfile->getRegionId()); goto HEpEL; o3WPr: return $request; goto JSjGO; WoAF2: if (!(null == $request->getAcceptFormat())) { goto cIDBE; } goto f1Jpj; seXq2: brOTb: goto o3WPr; HEpEL: USdAq: goto WoAF2; yBy3X: if (!(null == $request->getMethod())) { goto brOTb; } goto S9ldT; f1Jpj: $request->setAcceptFormat($this->iClientProfile->getFormat()); goto HMa33; JSjGO: } private function buildApiException($respObject, $httpStatus) { throw new ServerException($respObject->Message, $respObject->Code, $httpStatus, $respObject->RequestId); } private function parseAcsResponse($body, $format) { goto EB249; ETlsY: $respObject = json_decode($body); goto JcQ7u; k4_xm: $respObject = $body; goto jMrjS; N5tUI: $respObject = @simplexml_load_string($body); goto EJW3t; EB249: if ("\x4a\123\x4f\x4e" == $format) { goto QDLDe; } goto Ho8uI; Ho8uI: if ("\x58\115\x4c" == $format) { goto aL46q; } goto OIax6; OIax6: if (!("\122\101\127" == $format)) { goto nct3x; } goto k4_xm; BT5Wl: goto nTogi; goto I3_kv; I3_kv: aL46q: goto N5tUI; jMrjS: nct3x: goto BT5Wl; VjCbW: QDLDe: goto ETlsY; XG6v8: return $respObject; goto yFKNi; P6JBT: goto QWZTn; goto VjCbW; JcQ7u: QWZTn: goto XG6v8; EJW3t: nTogi: goto P6JBT; yFKNi: } } goto eC_LF; ZcbO5: interface ISigner { public function getSignatureMethod(); public function getSignatureVersion(); public function signString($source, $accessSecret); } goto bXN3Q; yFW22: class DefaultProfile implements IClientProfile { private static $profile; private static $endpoints; private static $credential; private static $regionId; private static $acceptFormat; private static $isigner; private static $iCredential; private function __construct($regionId, $credential) { self::$regionId = $regionId; self::$credential = $credential; } public static function getProfile($regionId, $accessKeyId, $accessSecret) { goto k7k23; k7k23: $credential = new Credential($accessKeyId, $accessSecret); goto sRXLt; sRXLt: self::$profile = new DefaultProfile($regionId, $credential); goto WeWGt; WeWGt: return self::$profile; goto MOW1J; MOW1J: } public function getSigner() { goto w5k2_; jrw1a: self::$isigner = new ShaHmac1Signer(); goto ExfNU; K_uDs: return self::$isigner; goto TjvjQ; ExfNU: P06hZ: goto K_uDs; w5k2_: if (!(null == self::$isigner)) { goto P06hZ; } goto jrw1a; TjvjQ: } public function getRegionId() { return self::$regionId; } public function getFormat() { return self::$acceptFormat; } public function getCredential() { goto iM06M; ICkh5: x_GKj: goto AjZ3k; iM06M: if (!(null == self::$credential && null != self::$iCredential)) { goto x_GKj; } goto h3H5L; h3H5L: self::$credential = self::$iCredential; goto ICkh5; AjZ3k: return self::$credential; goto TyBg2; TyBg2: } public static function getEndpoints() { goto qENR0; QlfBo: AeYmW: goto NZldr; bQTM6: self::$endpoints = EndpointProvider::getEndpoints(); goto QlfBo; qENR0: if (!(null == self::$endpoints)) { goto AeYmW; } goto bQTM6; NZldr: return self::$endpoints; goto JeKp1; JeKp1: } public static function addEndpoint($endpointName, $regionId, $product, $domain) { goto hdhY1; pk6bm: $endpoint = self::findEndpointByName($endpointName); goto i1R7i; w7_35: vSqG5: goto Jf8cG; nSqkA: goto vSqG5; goto hV0fh; hV0fh: x63PH: goto vs4QE; i1R7i: if (null == $endpoint) { goto x63PH; } goto yA_e8; yA_e8: self::updateEndpoint($regionId, $product, $domain, $endpoint); goto nSqkA; vs4QE: self::addEndpoint_($endpointName, $regionId, $product, $domain); goto w7_35; hdhY1: if (!(null == self::$endpoints)) { goto mWRgJ; } goto wdvo4; wdvo4: self::$endpoints = self::getEndpoints(); goto ZTFwv; ZTFwv: mWRgJ: goto pk6bm; Jf8cG: } public static function findEndpointByName($endpointName) { foreach (self::$endpoints as $key => $endpoint) { goto F6oor; K2m05: return $endpoint; goto SVTvh; SrqKv: W5SAl: goto Cwhzo; F6oor: if (!($endpoint->getName() == $endpointName)) { goto azqba; } goto K2m05; SVTvh: azqba: goto SrqKv; Cwhzo: } cnkII: } private static function addEndpoint_($endpointName, $regionId, $product, $domain) { goto eP_J4; RvqRb: $endpoint = new Endpoint($endpointName, $regionIds, $productDomains); goto wbfzn; hU9AH: $productDomains = array(new ProductDomain($product, $domain)); goto RvqRb; eP_J4: $regionIds = array($regionId); goto hU9AH; wbfzn: array_push(self::$endpoints, $endpoint); goto lQrd1; lQrd1: } private static function updateEndpoint($regionId, $product, $domain, $endpoint) { goto CDcaK; lZDkr: sJRlu: goto wBU2e; MEHSB: if (in_array($regionId, $regionIds)) { goto sJRlu; } goto RdV1A; T2ino: array_push($productDomains, new ProductDomain($product, $domain)); goto wZXC0; CDcaK: $regionIds = $endpoint->getRegionIds(); goto MEHSB; wBU2e: $productDomains = $endpoint->getProductDomains(); goto CjIwQ; RdV1A: array_push($regionIds, $regionId); goto YEXnY; CjIwQ: if (!(null == self::findProductDomain($productDomains, $product, $domain))) { goto YNr9r; } goto T2ino; oj8Cy: $endpoint->setProductDomains($productDomains); goto HMzHC; YEXnY: $endpoint->setRegionIds($regionIds); goto lZDkr; wZXC0: YNr9r: goto oj8Cy; HMzHC: } private static function findProductDomain($productDomains, $product, $domain) { goto R304Z; ux3RK: return null; goto TWy8W; j8xeR: guyyT: goto ux3RK; R304Z: foreach ($productDomains as $key => $productDomain) { goto jfvSG; ZVRWa: return $productDomain; goto PcVAh; jfvSG: if (!($productDomain->getProductName() == $product && $productDomain->getDomainName() == $domain)) { goto WaT4b; } goto ZVRWa; Tqp7w: YZHoj: goto CZaOB; PcVAh: WaT4b: goto Tqp7w; CZaOB: } goto j8xeR; TWy8W: } } goto Rkedv; PZ6jQ: class HttpResponse { public $curlErrorCode; public $curlErrorMessage; public $statusCode; public $headers; public $body; } goto pCwn_; A8yNS: foreach ($json_array["\105\156\144\x70\157\151\156\164"] as $json_endpoint) { goto HcSle; iO6Dl: o_uxb: goto BXg2m; BXg2m: goto uDpWm; goto ZlG6g; wkqKr: rHZ3k: goto uncRs; Tb25z: $products = array(); goto bzl3X; iirVl: YnStz: goto gnHt5; ZlG6g: n3gpM: goto Tb25z; Gw8nD: $json_products = $json_endpoint["\120\x72\x6f\x64\165\143\x74\163"]["\120\x72\x6f\144\165\143\x74"]; goto SJKkG; uEXLR: goto dR_45; goto wkqKr; PP9SE: array_push($endpoints, $endpoint); goto iirVl; pseuB: PvqvF: goto B8feq; u_o8E: goto Ix51x; goto DQsAT; t93E5: if (!is_array($json_region_ids)) { goto rHZ3k; } goto ewE_4; SJKkG: if (array() === $json_products or !is_array($json_products)) { goto n3gpM; } goto HXvhx; HXvhx: if (array_keys($json_products) !== range(0, count($json_products) - 1)) { goto JQsxI; } goto PpjWC; c1roC: $products = array($json_products); goto iO6Dl; bzl3X: uDpWm: goto u_o8E; F2yp_: SN1xa: goto xMG9J; HhYg1: $json_region_ids = $json_endpoint["\122\x65\147\151\x6f\156\x49\x64\163"]["\122\x65\147\x69\x6f\x6e\x49\144"]; goto t93E5; HcSle: if (!array_key_exists("\x52\x65\147\151\157\156\x49\144", $json_endpoint["\x52\145\147\x69\157\x6e\111\144\x73"])) { goto G4kL4; } goto HhYg1; B8feq: if (!array_key_exists("\x50\x72\157\x64\x75\x63\x74", $json_endpoint["\120\x72\157\144\165\x63\164\163"])) { goto OK29V; } goto Gw8nD; uncRs: $region_ids = array($json_region_ids); goto gohYJ; KninU: foreach ($products as $product) { goto z8CiK; Qf7_9: JTNu8: goto BE_l1; z8CiK: $product_domain = new ProductDomain($product["\120\x72\157\144\x75\x63\x74\x4e\141\155\x65"], $product["\x44\x6f\155\141\x69\156\116\141\155\145"]); goto Sx3_a; Sx3_a: array_push($product_domains, $product_domain); goto Qf7_9; BE_l1: } goto F2yp_; MwRN6: $product_domains = array(); goto KninU; xMG9J: $endpoint = new Endpoint($region_ids[0], $region_ids, $product_domains); goto PP9SE; gohYJ: dR_45: goto mK2lD; mK2lD: goto PvqvF; goto L7KRC; DQsAT: OK29V: goto IfRzT; ewE_4: $region_ids = $json_region_ids; goto uEXLR; PpjWC: $products = $json_products; goto InFXS; dnRda: JQsxI: goto c1roC; kp_En: $region_ids = array(); goto pseuB; L7KRC: G4kL4: goto kp_En; JioUY: Ix51x: goto MwRN6; InFXS: goto o_uxb; goto dnRda; IfRzT: $products = array(); goto JioUY; gnHt5: } goto YS2ny; k4Vi5: class SendSmsRequest extends RpcAcsRequest { public function __construct() { parent::__construct("\104\x79\163\x6d\163\x61\160\x69", "\62\60\x31\67\55\60\x35\55\62\65", "\x53\145\x6e\144\x53\155\163"); $this->setMethod("\120\117\123\x54"); } private $templateCode; private $phoneNumbers; private $signName; private $resourceOwnerAccount; private $templateParam; private $resourceOwnerId; private $ownerId; private $outId; private $smsUpExtendCode; public function getTemplateCode() { return $this->templateCode; } public function setTemplateCode($templateCode) { $this->templateCode = $templateCode; $this->queryParameters["\124\145\x6d\160\154\x61\x74\145\103\x6f\x64\x65"] = $templateCode; } public function getPhoneNumbers() { return $this->phoneNumbers; } public function setPhoneNumbers($phoneNumbers) { $this->phoneNumbers = $phoneNumbers; $this->queryParameters["\120\150\157\156\x65\x4e\x75\x6d\x62\145\162\x73"] = $phoneNumbers; } public function getSignName() { return $this->signName; } public function setSignName($signName) { $this->signName = $signName; $this->queryParameters["\123\x69\147\156\x4e\141\155\145"] = $signName; } public function getResourceOwnerAccount() { return $this->resourceOwnerAccount; } public function setResourceOwnerAccount($resourceOwnerAccount) { $this->resourceOwnerAccount = $resourceOwnerAccount; $this->queryParameters["\x52\145\x73\x6f\165\x72\x63\x65\x4f\167\156\145\162\101\143\143\x6f\165\x6e\x74"] = $resourceOwnerAccount; } public function getTemplateParam() { return $this->templateParam; } public function setTemplateParam($templateParam) { $this->templateParam = $templateParam; $this->queryParameters["\124\x65\x6d\x70\x6c\x61\164\145\120\x61\162\141\155"] = $templateParam; } public function getResourceOwnerId() { return $this->resourceOwnerId; } public function setResourceOwnerId($resourceOwnerId) { $this->resourceOwnerId = $resourceOwnerId; $this->queryParameters["\122\145\x73\157\x75\162\x63\x65\117\167\x6e\x65\162\111\144"] = $resourceOwnerId; } public function getOwnerId() { return $this->ownerId; } public function setOwnerId($ownerId) { $this->ownerId = $ownerId; $this->queryParameters["\x4f\x77\156\145\x72\x49\144"] = $ownerId; } public function getOutId() { return $this->outId; } public function setOutId($outId) { $this->outId = $outId; $this->queryParameters["\117\165\164\111\144"] = $outId; } public function getSmsUpExtendCode() { return $this->smsUpExtendCode; } public function setSmsUpExtendCode($smsUpExtendCode) { $this->smsUpExtendCode = $smsUpExtendCode; $this->queryParameters["\123\x6d\163\x55\160\105\x78\164\x65\156\x64\x43\157\x64\x65"] = $smsUpExtendCode; } } goto vghb1; CVvad: class ClientException extends \Exception { function __construct($errorMessage, $errorCode) { goto FltEr; Gx4bB: $this->setErrorType("\103\x6c\151\145\x6e\x74"); goto xt58w; FltEr: parent::__construct($errorMessage); goto y3ti0; Zf2vn: $this->errorCode = $errorCode; goto Gx4bB; y3ti0: $this->errorMessage = $errorMessage; goto Zf2vn; xt58w: } private $errorCode; private $errorMessage; private $errorType; public function getErrorCode() { return $this->errorCode; } public function setErrorCode($errorCode) { $this->errorCode = $errorCode; } public function getErrorMessage() { return $this->errorMessage; } public function setErrorMessage($errorMessage) { $this->errorMessage = $errorMessage; } public function getErrorType() { return $this->errorType; } public function setErrorType($errorType) { $this->errorType = $errorType; } } goto ZcbO5; Rkedv: abstract class AcsRequest { protected $version; protected $product; protected $actionName; protected $regionId; protected $acceptFormat; protected $method; protected $protocolType = "\150\164\x74\x70"; protected $content; protected $queryParameters = array(); protected $headers = array(); function __construct($product, $version, $actionName) { goto ZleRT; qGl6f: $this->product = $product; goto ByVYd; vG03h: $this->actionName = $actionName; goto lkj6H; ByVYd: $this->version = $version; goto vG03h; ZleRT: $this->headers["\170\55\163\x64\153\x2d\x63\154\x69\145\x6e\164"] = "\160\x68\x70\x2f\x32\56\60\56\60"; goto qGl6f; lkj6H: } public abstract function composeUrl($iSigner, $credential, $domain); public function getVersion() { return $this->version; } public function setVersion($version) { $this->version = $version; } public function getProduct() { return $this->product; } public function setProduct($product) { $this->product = $product; } public function getActionName() { return $this->actionName; } public function setActionName($actionName) { $this->actionName = $actionName; } public function getAcceptFormat() { return $this->acceptFormat; } public function setAcceptFormat($acceptFormat) { $this->acceptFormat = $acceptFormat; } public function getQueryParameters() { return $this->queryParameters; } public function getHeaders() { return $this->headers; } public function getMethod() { return $this->method; } public function setMethod($method) { $this->method = $method; } public function getProtocol() { return $this->protocolType; } public function setProtocol($protocol) { $this->protocolType = $protocol; } public function getRegionId() { return $this->regionId; } public function setRegionId($region) { $this->regionId = $region; } public function getContent() { return $this->content; } public function setContent($content) { $this->content = $content; } public function addHeader($headerKey, $headerValue) { $this->headers[$headerKey] = $headerValue; } } goto YzAcN; eC_LF: class Endpoint { private $name; private $regionIds; private $productDomains; function __construct($name, $regionIds, $productDomains) { goto TxfOe; bGSVx: $this->regionIds = $regionIds; goto lMw5V; lMw5V: $this->productDomains = $productDomains; goto z7N54; TxfOe: $this->name = $name; goto bGSVx; z7N54: } public function getName() { return $this->name; } public function setName($name) { $this->name = $name; } public function getRegionIds() { return $this->regionIds; } public function setRegionIds($regionIds) { $this->regionIds = $regionIds; } public function getProductDomains() { return $this->productDomains; } public function setProductDomains($productDomains) { $this->productDomains = $productDomains; } } goto EhC8_; mkGOt: EndpointProvider::setEndpoints($endpoints);